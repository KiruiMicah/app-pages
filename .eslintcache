[{"E:\\Mike\\Teach\\react\\zep\\src\\App.js":"1","E:\\Mike\\Teach\\react\\zep\\src\\reportWebVitals.js":"2","E:\\Mike\\Teach\\react\\zep\\src\\index.js":"3"},{"size":2454,"mtime":1607983060512,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1607975878575,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1607975878575,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1ahuwfm",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Mike\\Teach\\react\\zep\\src\\App.js",["15","16","17"],"import React from 'react';\nimport './App.css';\nclass App extends React.Component {\n  state = {\n    categories: [],\n    fetchedcategories: null,\n    title: ''\n  }\n  componentDidMount() {\n    const apiUrl = 'https://api.chucknorris.io/jokes/categories';\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((data) => this.setState({categories:data})\n      );\n  }\n  fetchByCategory( category) {\n    console.log('this is:', category);\n    const apiUrl = 'https://api.chucknorris.io/jokes/random?category='+category;\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((data) => \n      this.setState({fetchedcategories:data})\n      );\n  }\n  handleChange(event) {  \n    this.setState({title: event.target.value})\n    console.log(this.state.title);\n  \n  }\n  render() {\n    this.state.categories = this.state.categories.filter(cats => {\n      return cats.indexOf(this.state.title.toLowerCase()) !== -1;\n    });\n    if(this.state.fetchedcategories!==null){\n      console.log(this.state.fetchedcategories.categories[0]);\n      console.log(this.state.fetchedcategories);\n    console.log(this.state.fetchedcategories.value);\n    return  (\n      <div className=\"container\">\n       <div className=\"col-xs-12\">\n       <div className=\"col-xs-12\"/>\n       <h4>{this.state.fetchedcategories.categories[0].toUpperCase()}</h4>\n        <div className=\"card\">\n           <div className=\"card-body\">\n             <h5 className=\"card-title\">{this.state.fetchedcategories.value} </h5>\n             \n           </div>\n         </div>\n         \n       </div>\n      </div>\n      \n   );\n    }\n    return  (\n      <div className=\"container\">\n       <div className=\"col-xs-12\">\n       <div className=\"col-xs-12\"/>\n       <h2>List of available categories.</h2>\n\n      <label className=\"search-label\" htmlFor=\"search-input\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue=\"\"\n\t\t\t\t\t\tid=\"search-input\"\n            placeholder=\"Search...\"\n            value={this.state.title} \n    onChange={this.handleChange.bind(this)}\n\t\t\t\t\t/>\n\t\t\t\t\t<i className=\"fa fa-search search-icon\"/>\n\t\t\t\t</label>\n\t\t\t\t\n\t\t\n\t\t\t\t\n\t\t\t\n       {this.state.categories.map((category) => (\n         <div className=\"card\">\n           <div className=\"card-body\">\n             <a href=\"#\" className=\"card-title\" onClick={() => this.fetchByCategory(category)}>{category} </a>\n             \n           </div>\n         </div>\n       ))}\n       </div>\n      </div>\n   );\n  }\n}\nexport default App;","E:\\Mike\\Teach\\react\\zep\\src\\reportWebVitals.js",[],"E:\\Mike\\Teach\\react\\zep\\src\\index.js",[],{"ruleId":"18","severity":1,"message":"19","line":31,"column":5,"nodeType":"20","endLine":31,"endColumn":15},{"ruleId":"21","severity":1,"message":"22","line":67,"column":13,"nodeType":"23","endLine":67,"endColumn":37},{"ruleId":"24","severity":1,"message":"25","line":79,"column":14,"nodeType":"26","endLine":79,"endColumn":96},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]